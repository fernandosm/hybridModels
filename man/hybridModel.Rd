% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hybrid_Model.R
\name{hybridModel}
\alias{hybridModel}
\title{Hybrid model simulation.}
\usage{
hybridModel(network, var.names, link.type = "migration", model = "custom",
  init.cond, fill.time = F, model.parms, prop.func = NULL,
  state.change.matrix = NULL, state.var = NULL, ssa.method = list(method =
  "D", epsilon = 0.03, nc = 10, dtf = 10, nd = 100), nodesCensus = NULL,
  sim.number = 1, pop.correc = TRUE, num.cores = "max")
}
\arguments{
\item{network}{a \code{\link{data.frame}} with variables that describe
the donor node, the reciever node, the time when each connection between
donor to the reciever happened and the weight of these connection.}

\item{var.names}{a \code{\link{list}} with variable names of the network:
the donor node, the reciever node, the time when each connection between
donor to the reciever happened and the weight of these connection.
The variables names must be "from", "to", "Time" and "arc", respectively.}

\item{link.type}{a \code{\link{character}} describing the link type between 
nodes. There are two types: 'migration' and 'influence'. In the migration
link type there are actual migration between nodes. In the influence 
link type individuals does not migrate, just influences another node.}

\item{model}{a \code{\link{character}} describing model's name.}

\item{init.cond}{a named \code{\link{vector}} with initial conditions.}

\item{fill.time}{It indicates whether to return all dates or just the dates
when nodes get connected.}

\item{model.parms}{a named \code{\link{vector}} with model's parameters.}

\item{prop.func}{a character \code{\link{vector}} with propensity functions
of a generic node. See references for more details}

\item{state.change.matrix}{is a state-change \code{\link{matrix}}. See references
for more details}

\item{state.var}{a character \code{\link{vector}} with the state varialbes of
the propensity functions.}

\item{ssa.method}{a \code{\link{list}} with SSA parameters. The default method
is the direct method. See references for more details}

\item{nodesCensus}{a \code{\link{data.frame}} with the first column describing
nodes' ID, the second column with the number of individuals and the third
describing the day of the census.}

\item{sim.number}{Number of repetitions.The default value is 1}

\item{pop.correc}{Whether \code{hybridModel} function tries to balance the number
of individuals or not. The default value is TRUE.}

\item{num.cores}{number of  threads/cores that the simulation will use. the
default value is num.cores = 'max', the algothim will use all
threads/cores available.}
}
\value{
Object containing a \code{\link{data.frame}} (results) with the number
        of individuals through time per node and per state.
}
\description{
\code{hybridModel} function runs hybrid models simulations.
}
\examples{
# Parameters and initial conditions for an SIS model
# loading the data set 
data(networkSample) # help("networkSample"), for more info
networkSample <- networkSample[which(networkSample$Dia < "2012-03-20"),]

var.names <- list(from = 'originID', to = 'destinyID', Time = 'Dia',
                  arc = 'num.animais')
                  
prop.func <- c('beta * S * I / (S + I)', 'gamma * I')
state.var <- c('S', 'I')
state.change.matrix <- matrix(c(-1,  1,  # S
                                 1, -1), # I
                              nrow = 2, ncol = 2, byrow = TRUE)
                              
model.parms <- c(beta = 0.1, gamma = 0.01)

init.cond <- rep(100, length(unique(c(networkSample$originID,
                                      networkSample$destinyID))))
names(init.cond) <- paste('S', unique(c(networkSample$originID,
                                        networkSample$destinyID)), sep = '')
init.cond <- c(init.cond, c(I36811 = 10, I36812 = 10)) # adding infection
                  
# running simulations, check num of cores available (num.cores)
sim.results <- hybridModel(network = networkSample, var.names = var.names,
                           model.parms = model.parms, state.var = state.var,
                           prop.func = prop.func, init.cond = init.cond,
                           state.change.matrix = state.change.matrix,
                           sim.number = 2, num.cores = 2)

# default plot layout (plot.types: 'pop.mean', 'subpop', or 'subpop.mean')
plot(sim.results, plot.type = 'subpop.mean')

# changing plot layout with ggplot2 (example)
# uncomment the lines below to test new layout exemple
#library(ggplot2)
#plot(sim.results, plot.type = 'subpop') + ggtitle('New Layout') + 
#  theme_bw() + theme(axis.title = element_text(size = 14, face = "italic"))

}
\references{
[1] Pineda-krch, M. (2008). GillespieSSA : Implementing the Stochastic
    Simulation Algorithm in R. Journal of Statistical Software, 25(12).
}
\seealso{
\link{GillespieSSA}.
}

